Progetto telecamera con Raspberry PI http://www.codeproject.com/Articles/665518/Raspberry-Pi-as-low-cost-HD-surveillance-camera
Raspberry PI camera: http://thepihut.com/pages/how-to-install-the-raspberry-pi-camera
Streaming of motion jpeg with nodejs: https://github.com/rodowi/Paparazzo.js
Elenco telecamere IP: http://aranzulla.tecnologia.virgilio.it/telecamere-ip-50282.html
Standard controllo ip camera: VAPIX
OpenCV con beaglebone: http://derekmolloy.ie/beaglebone/beaglebone-video-capture-and-image-processing-on-embedded-linux-using-opencv/

OpenCV per diff
    original: http://blog.cedric.ws/opencv-simple-motion-detection
    concave hull opt: http://blog.cedric.ws/opencv-simple-motion-detection-concave-hull-optimization
    source: https://github.com/cedricve/motion_detection
    raspb pi + opencv: https://robidouille.wordpress.com/2013/10/19/raspberry-pi-camera-with-opencv/
        but, use this code: https://github.com/Jenselme/raspicam_cv
    web interface: http://blog.cedric.ws/raspberry-pi-opencv-create-a-security-system-web-interface

Componenti:
Raspberry PI IR camera: http://it.rs-online.com/web/p/modulo-video/7902811/
Raspberry PI video camera: http://it.rs-online.com/web/p/modulo-video/7757731/
Moduli radio: http://www.lprs.co.uk/wireless-modules/remote-control-systems.html
Tutorial con bluetooth per arduino: http://blog.miguelgrinberg.com/post/building-an-arduino-robot-part-vi-remote-control

GPIO:
intro: http://www.themagpi.com/issue/issue-2/article/in-control/
libs in C: http://www.raspberrypi.org/forums/viewtopic.php?f=33&t=9729
Low level: http://elinux.org/RPi_Low-level_peripherals#GPIO_Driving_Example_.28C.29
python + web server: http://davstott.me.uk/index.php/2013/03/17/raspberry-pi-controlling-gpio-from-the-web/

Software:
Cross compile Raspberry: http://stackoverflow.com/questions/19162072/installing-raspberry-pi-cross-compiler
Dropbox upload via script: https://github.com/andreafabrizi/Dropbox-Uploader
Minidump
linux: http://stackoverflow.com/questions/7470310/generating-mini-text-dump-linux
crash report google: https://code.google.com/p/google-breakpad/wiki/GettingStartedWithBreakpad

Connettivit√†:
dns dinamico: http://dyndns.it/solutions/#
invio sms
    code sample: http://www.codeproject.com/Articles/387567/How-to-send-an-SMS-message-from-an-application
    servizio: http://www.cardboardfish.com/products/personal/index.html
Libreria open per whatsapp: https://github.com/tgalal/yowsup

Message passing (zeromq): http://zeromq.org/
serialization (google protocol buffers): https://developers.google.com/protocol-buffers/docs/overview
folly lockfree: https://github.com/facebook/folly/blob/master/folly/ProducerConsumerQueue.h

Monitor USB mount in Python: http://pyudev.readthedocs.org/en/latest/

Sito web:
Sito statico: http://jekyllrb.com/
Flask, web server python: http://flask.pocoo.org/
Bootstrap, front-end framework cross device: http://getbootstrap.com/
Real time video streaming: http://phoboslab.org/log/2013/09/html5-live-video-streaming-via-websockets
with videojs: http://stackoverflow.com/questions/21849961/videojs-with-live-stream
HTML5 video player: http://www.videojs.com/
picture gallery: http://blog.cedric.ws/raspberry-pi-opencv-create-a-security-system-web-interface
    installare apache + php: http://www.instructables.com/id/Raspberry-Pi-Web-Server/step7/Install-Apache-with-PHP/
    installare lighttpd + php: https://wiki.ubuntu.com/Lighttpd+PHP
FastCGI with lighttpd: http://redmine.lighttpd.net/projects/1/wiki/Docs_ModFastCGI
    used to interface antifurto with lighttpd
    how to use it with python: https://docs.python.org/2/howto/webservers.html
    wsgi with flup: http://lucumr.pocoo.org/2007/5/21/getting-started-with-wsgi/
    fifo in python: http://stackoverflow.com/questions/17449110/fifo-reading-in-a-loop
refresh image with new at same url:
    http://stackoverflow.com/questions/1077041/refresh-image-with-a-new-one-at-the-same-url
set cache control lighttpd:
    http://www.cyberciti.biz/faq/lighttpd-send-cache-control-maxage-headers-of-staticfiles/
Whatchdog daemon: http://www.sat.dundee.ac.uk/psc/watchdog/watchdog-background.html
    on raspberry: http://www.bayerschmidt.com/raspberry-pi/89-auto-reboot-a-hung-raspberry-pi-using-the-on-board-watchdog-timer.html
signal handling info:
    http://www.cs.utah.edu/dept/old/texinfo/glibc-manual-0.02/library_21.html#SEC358
    http://stackoverflow.com/questions/17942034/simple-linux-signal-handling
    http://cboard.cprogramming.com/linux-programming/150239-when-re-enable-signal-handlers.html
    http://pubs.opengroup.org/onlinepubs/009695399/functions/pthread_sigmask.html

Core dump:
    abrt daemon: http://prefetch.net/blog/index.php/2012/01/19/using-the-automated-bug-reporting-tool-abrt-to-generate-core-dumps-when-a-linux-process-fails/
    core pattern: http://sigquit.wordpress.com/2009/03/13/the-core-pattern/
    core dump analysis: http://stackoverflow.com/questions/5115613/core-dump-file-analysis
Libfcgi:
    examples: https://github.com/toshic/libfcgi/tree/master/examples
