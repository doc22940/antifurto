TODO LIST
---------

* Lower timeout on upload pictures enqueued
* Reboot on crash
  - use linux whatchdog daemon
  - save persistently the last status and restore it (monitoring on/off)
* Kill subprocess
  - used to kill notification processes
* Web server
  - add query to monitor status (posix message queue? socket? pipe?)
* Bug fix
  - in RecordingController::initUploader(), if no connection is available, the
    function blocks;
  - manage connection not available in all the possible cases
  - fix start stop monitoring
        mmal: mmal_vc_port_enable: failed to enable port vc.ril.camera:out:1(I420):
        ENOSPC
        mmal: mmal_port_enable: failed to enable port
        vc.ril.camera:out:1(I420)(0xb17044a0) (ENOSPC)
        mmal: camera video callback2 error
        mmal: raspiCamCvCreateCameraCapture: Failed to create camera component
    the problem is that the shutdown of the camera is not right
  - see for example userland/host_applications/linux/apps/raspicam/RaspiStill.c
  - use another api: http://robotblogging.blogspot.it/2013/10/an-efficient-and-simple-c-api-for.html
  - another reference: http://thinkrpi.wordpress.com/2013/05/22/opencv-and-camera-board-csi/

- In Picture.hpp use an std::vector<unsigned char> instead of cv::Mat;
  provide conversion operators to InputArray and OutputArray
- Packaging system
- Service registration with start and stop
- Radio controller
- Bootstrap script for cross compile
- Add cmake configurations for profile and distribution
  see: CMAKE_CONFIGURATION_TYPES in
  http://www.cmake.org/Wiki/CMake_Useful_Variables
- Refactor of CameraController
  - Port CameraController to use TaskScheduler
    to do this, a cancellation token for a Task is needed
- Use two TaskScheduler
  - one only for the pictures cycle
  - one for all the long running tasks
- Display logs in webserver
- Refactor of spsc queue:
  - Use a lock to make the thread sleep? consumer call lock and blocks itself
    because unlock is made by producer
  - implement a lock that is a spinlock until a timeout and after go to sleep
    (hybrid mutex)
  - alternative: block in a std::future.get()
- Observer with deregistration:
  - example: http://eviltwingames.com/blog/the-observer-pattern-revisited/
