TODO LIST
---------

* Mail send
  - remove the alert@hostname destination
  - optional sender mail address?
* Reboot on crash
  - use linux whatchdog daemon
  - use systemd instead??
    - pid file needed
  - save persistently the last status and restore it (monitoring on/off)
* Kill subprocess
  - used to kill notification processes
* Web server
  - add query to monitor status (posix message queue? socket? pipe?)
* Bug fix
  - if start is called between "stopping live view" and "live view stopped", a
    crash occur. So:
    - avoid stopping asynchrously by fixing observer utility
    - add a lock and a double checked locking pattern
  - in RecordingController::initUploader(), if no connection is available, the
    function blocks;
  - manage connection not available in all the possible cases
* In Antifurto, make controllers in constructor, not lazily on demand
  - what if RecordingController blocks?
  - remove minimal constructor of RecordingController, use the full built
    one for the maintenance at the beginning
* In Picture.hpp use an std::vector<unsigned char> instead of cv::Mat;
  1 use opencv only for usb camera and for imwrite
  2 use libjpeg instead of opencv for image encoding
  ? provide conversion operators to InputArray and OutputArray

- Packaging system
- Service registration with start and stop
- Radio controller
- Bootstrap script for cross compile
- Add cmake configurations for profile and distribution
  see: CMAKE_CONFIGURATION_TYPES in
  http://www.cmake.org/Wiki/CMake_Useful_Variables
- Refactor of CameraController
  - Port CameraController to use TaskScheduler
    to do this, a cancellation token for a Task is needed
- Use two TaskScheduler
  - one only for the pictures cycle
  - one for all the long running tasks
- Display logs in webserver
- Refactor of spsc queue:
  - Use a lock to make the thread sleep? consumer call lock and blocks itself
    because unlock is made by producer
  - implement a lock that is a spinlock until a timeout and after go to sleep
    (hybrid mutex)
  - alternative: block in a std::future.get()
